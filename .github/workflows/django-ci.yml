name: SonarQube Scan

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  sonar:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug project structure
        run: |
          echo "=== Current directory structure ==="
          pwd
          ls -la
          echo ""
          echo "=== Searching for Python files ==="
          find . -name "*.py" -type f | grep -E "(settings|manage)" | head -20
          echo ""
          echo "=== Checking for rsa_app directory ==="
          if [ -d "rsa_app" ]; then
            echo "rsa_app directory exists:"
            ls -la rsa_app/
          else
            echo "rsa_app directory NOT found"
            echo "Available directories:"
            find . -type d -name "*rsa*" -o -name "*app*" | head -10
          fi
          echo ""
          echo "=== Checking manage.py location ==="
          find . -name "manage.py" -type f
          echo ""
          echo "=== Checking settings.py location ==="
          find . -name "settings.py" -type f

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Test Python imports
        run: |
          echo "=== Testing Python imports ==="
          python -c "
          import sys
          print('Python path:')
          for p in sys.path:
              print(f'  {p}')
          print()
          try:
              import rsa_app
              print('✓ rsa_app imported successfully')
              print(f'  rsa_app location: {rsa_app.__file__}')
          except ImportError as e:
              print(f'✗ rsa_app import failed: {e}')
          print()
          try:
              import rsa_app.settings
              print('✓ rsa_app.settings imported successfully')
          except ImportError as e:
              print(f'✗ rsa_app.settings import failed: {e}')
          "

      - name: Create pytest.ini
        run: |
          cat > pytest.ini << EOF
          [pytest]
          DJANGO_SETTINGS_MODULE = rsa_app.settings
          django_find_project = false
          python_files = tests.py test_*.py *_tests.py
          addopts = --cov=rsa_app --cov-report=xml --cov-report=term
          EOF
          echo "Created pytest.ini:"
          cat pytest.ini

      - name: Run tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: rsa_app.settings  # LIGNE CORRIGÉE
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "Using DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE"
          python -m pytest \
            --cov=rsa_app \
            --cov-report=xml \
            --cov-report=term

      - name: Install SonarScanner
        run: |
          export SONAR_SCANNER_VERSION=5.0.1.3006
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
          unzip sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
          sudo mv sonar-scanner-${SONAR_SCANNER_VERSION}-linux /opt/sonar-scanner
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Start SonarQube
        run: |
          docker run -d --name sonarqube -p 9000:9000 sonarqube:community
          timeout 180 bash -c 'until curl -f http://localhost:9000/api/system/status; do sleep 10; done'

      - name: Analyze with SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=rsa_project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.coverage.exclusions=**/tests/**

      - name: Stop SonarQube
        if: always()
        run: |
          docker stop sonarqube || true
          docker rm sonarqube || true
